name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: install libs
      run: |
        pip install conan==1.60.0
        conan install . -pr:b ./profile_gcc_11 --install-folder=buildRelease
        
    - name: generate messages
      run: |
        mkdir cppMsg && mkdir pyMsg
        export GRPC_BIN_DIR=/home/runner/.conan/data/grpc/1.40.0/_/_/package/2a9907cb074c570b3e5233e696b4a536f9b22b31/bin
        export PROTOC=/home/runner/.conan/data/protobuf/3.20.0/_/_/package/3c46b99f1f6ceb18db163abcd9d9d56913b97edc/bin/protoc
        $PROTOC --proto_path=. --grpc_out=cppMsg \
          --plugin=protoc-gen-grpc=$GRPC_BIN_DIR/grpc_cpp_plugin \
          --cpp_out=cppMsg msg.proto
          
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset release -B buildRelease

    - name: Build
      # Build your program with the given configuration
      run: cmake --build buildRelease

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

